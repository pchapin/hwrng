
package Random is
   type Number_Type is mod 2**32;

   -----------------
   -- Type Generator
   -----------------

   -- An abstract interface to all random number generators returning integers.
   type Generator is interface;

   -- Returns the maximum value the given generator will ever return from Next.
   function Maximum(G : in Generator) return Number_Type is abstract;

   -- Return the next random number from the generator. Notice that the generator's state is
   -- updated.
   function Next(G : in out Generator) return Number_Type is abstract
     with Post'Class => (0 <= Next'Result and Next'Result <= Maximum(G));

   -- Returns a random number in the given range (inclusive). Notice that the generator's state
   -- is updated. The precondition ensures that every value in the desired range might be
   -- returned. Warning! If the maximum of the generator is not an integer multiple of the size
   -- of the desired range, the output will be biased. Values in the upper part of the range
   -- will not occur frequently enough.
   function Next(G : in out Generator'Class; Low, High : Number_Type) return Number_Type
     with Pre => (High >= Low) and then (Maximum(G) >= (High - Low + 1));


   ------------------------
   -- Type Seeded_Generator
   ------------------------

   -- An abstract interface to all random number generators that require a seed.
   type Seeded_Generator is interface and Generator;

   -- Initializes the seeded generator with the given seed.
   procedure Seed(G : in out Seeded_Generator; Seed : in Number_Type) is abstract;


   ---------------------
   -- Type Bit_Generator
   ---------------------

   -- This type returns individual bits using a given underlying generator to obtain them.
   -- Warning! If the underlying generator has a maximum that is not 2**N - 1 for some N, the
   -- bits returned here will have bias. This is because the most significant bit of the output
   -- of the underlying generator will be set with a probability less than 0.5.
   type Bit_Generator is new Generator with private;

   -- The access parameter on Make allows several Bit_Generators to share the same underlying
   -- generator.
   not overriding function Make(G : access Generator'Class) return Bit_Generator;
   overriding function Maximum(B : in Bit_Generator) return Number_Type
     with Post => Maximum'Result = 1;
   overriding function Next(B : in out Bit_Generator) return Number_Type;


   ---------------------
   -- Type LSB_Generator
   ---------------------

   -- This type returns individual bits using a given underlying generator to obtain them. It
   -- returns the least significant bit of each value generated by the underlying generator.
   -- This is wasteful of random bits, but it means it is free of the bias problems of
   -- Bit_Generator. Warning! Maybe pseudo-random generators do a poor job of randomizing the
   -- LSB of their output.
   type LSB_Generator is new Generator with private;

   -- The access parameter on Make allows several LSB_Generators to share the same underlying
   -- generator.
   not overriding function Make(G : access Generator'Class) return LSB_Generator;
   overriding function Maximum(B : in LSB_Generator) return Number_Type
     with Post => Maximum'Result = 1;
   overriding function Next(B : in out LSB_Generator) return Number_Type;


   ---------------------------
   -- Type Linear_Congruential
   ---------------------------

   -- This type always has exactly 1_771_875 states. The parameters of the generator are fixed.
   -- Warning! Generators of this type are unsuitable for security sensitive applications.
   type Linear_Congruential is new Seeded_Generator with private;

   -- TODO: Allow the user to specify the parameters of the generator when it is constructed.
   not overriding function Make return Linear_Congruential;
   overriding function Maximum(L : in Linear_Congruential) return Number_Type;
   overriding function Next(L : in out Linear_Congruential) return Number_Type;
   overriding procedure Seed(L : in out Linear_Congruential; Seed : in Number_Type);

private

   type Bit_Generator is new Generator with
      record
         Underlying    : access Generator'Class;
         Current_Value : Number_Type;
         Mask          : Number_Type;
      end record;

   type LSB_Generator is new Generator with
      record
         Underlying : access Generator'Class;
      end record;

   type Linear_Congruential is new Seeded_Generator with
      record
         Current_Value : Number_Type := 0;
      end record;

end Random;
